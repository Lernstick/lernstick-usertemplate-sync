#!/bin/bash

set -e

# Load debconf to avoid loading it at every ucf invocation
. /usr/share/debconf/confmodule

# copy stdout and stderr to /var/log/lernstick-usertemplate-sync.log
LOGFILE="/var/log/lernstick-usertemplate-sync.log"
echo "========= lernstick-usertemplate-sync run started at $(date)" >> $LOGFILE
exec > >(tee --append --ignore-interrupts $LOGFILE) 2>&1

TEMPLATEDIR="/etc/skel"
USER="user"
GROUP="$(id --group --name ${USER})"
USERHOME=$( getent passwd "$USER" | cut -d: -f6 )
UCFDIR="/var/lib/lernstick-usertemplate-sync/${USER}/ucf"

# Abort if the users home directory does not exist
[ -d $USERHOME ] || exit 0

# Sync directory structure
# TODO remove directories removed
echo "Syncing directory structure ..."
find ${TEMPLATEDIR} -mindepth 1 -type d -print0 | while read -d $'\0' d ; do
    dir="${USERHOME}/${d#${TEMPLATEDIR}/}"
    if [ ! -e "$dir" ] ; then
        # Copy directory and set permissions if it does not yet exist
        echo -n "Copying ${dir} ... "
        cp --archive $d $dir && \
        chown --recursive "$USER:$GROUP" "$dir" && echo "done." || echo "failed."
    fi
done

# Sync config files
echo "Syncing config files ..."

# get list of already registered files
registered=$(ucfq --state-dir "$UCFDIR" --with-colons "$USER")

OIFS="$IFS"
IFS=$'\n'
for f in $(find $TEMPLATEDIR -type f ! -name '*.dpkg-*' ! -name '*.bak' ! -name '*~') ; do

    dest_file="${USERHOME}/${f#${TEMPLATEDIR}/}"
    # escaped version for use in basic regular expressions
    dest_file_escaped=$(echo "${dest_file}" | sed 's/[.[\*^$]/\\&/g')

    # Extract UCF state of current file and remove from the list of
    # registered files
    # A pipe does not work here as it would execute the read in a
    # subshell! And don't fail if the file is not (yet) registered.
    # Comand substitution doesn't work either because it interferes badly
    # with debconf
    ucfq_line="$(echo "$registered" | grep "^${dest_file_escaped}:" || true)"
    IFS=':' read ucf_file package exists changed <<< "$ucfq_line" || true
    registered=$(echo "$registered" | grep -v "^${dest_file_escaped}:" || true)

    # Sync file with UCF and register new files
    if ! ucf --debconf-ok --state-dir "${UCFDIR}" "$f" "$dest_file" ; then
        echo "Failed to sync ${f}!" >&2
    else
        if [ ! "$package" = "$USER" ] ; then
            # register with UCF, we set the package field to $USER
            echo -n "Registering ${dest_file} with UCF ... "
            ucfr --state-dir "$UCFDIR" "$USER" "$dest_file" && echo "done." || echo "failed."
        fi
        # TODO find a way to preserve ownership changes done by the user
        if [ -e "${dest_file}" ] && [ "$(stat -c %U:%G ${dest_file})" != "${USER}:${GROUP}" ] ; then
            echo -n "Setting user and group to ${USER}:${GROUP} on ${dest_file} ... "
            chown "$USER:$GROUP" "$dest_file" && echo "done." ||  echo "failed."
        fi
    fi
done
IFS="$OIFS"

if [ -n "$registered" ] ; then
    # Unregister and delete all remaining registered files. They no longer
    # exist in the template directory
    for f in $registered ; do
        IFS=':' read ucf_file package exists changed <<< """$f"""

        # Remove the file if unchanged and still existing
        if [ "$changed" = "No" -a "$exists" = "Yes" ] ; then
            echo -n "Removing ${ucf_file} ... "
            rm "$ucf_file"
            echo "done."
        fi

        # Unregister file
        echo -n "Unregistering ${ucf_file} ... "
        ucfr --purge --state-dir "$UCFDIR" "${USER}" "${ucf_file}"
        ucf --purge --state-dir "$UCFDIR" "${ucf_file}"
        echo "done."
    done
fi
